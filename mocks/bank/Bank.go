// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	bank "gitlab.com/bavatech/architecture/software/libs/go-modules/pix-sdk/bank"

	tls "crypto/tls"
)

// Bank is an autogenerated mock type for the Bank type
type Bank struct {
	mock.Mock
}

// GetAuthUrl provides a mock function with given fields:
func (_m *Bank) GetAuthUrl() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetAuthorization provides a mock function with given fields:
func (_m *Bank) GetAuthorization() bank.Authorization {
	ret := _m.Called()

	var r0 bank.Authorization
	if rf, ok := ret.Get(0).(func() bank.Authorization); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bank.Authorization)
	}

	return r0
}

// GetCertificate provides a mock function with given fields:
func (_m *Bank) GetCertificate() *tls.Certificate {
	ret := _m.Called()

	var r0 *tls.Certificate
	if rf, ok := ret.Get(0).(func() *tls.Certificate); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tls.Certificate)
		}
	}

	return r0
}

// GetCredentials provides a mock function with given fields:
func (_m *Bank) GetCredentials() bank.Credentials {
	ret := _m.Called()

	var r0 bank.Credentials
	if rf, ok := ret.Get(0).(func() bank.Credentials); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bank.Credentials)
	}

	return r0
}

// GetUrl provides a mock function with given fields:
func (_m *Bank) GetUrl() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SetAuthorization provides a mock function with given fields: authorization
func (_m *Bank) SetAuthorization(authorization bank.Authorization) {
	_m.Called(authorization)
}

type mockConstructorTestingTNewBank interface {
	mock.TestingT
	Cleanup(func())
}

// NewBank creates a new instance of Bank. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBank(t mockConstructorTestingTNewBank) *Bank {
	mock := &Bank{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
