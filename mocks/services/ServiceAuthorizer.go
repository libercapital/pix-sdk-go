// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	bank "gitlab.com/bavatech/architecture/software/libs/go-modules/pix-sdk.git/bank"
)

// ServiceAuthorizer is an autogenerated mock type for the ServiceAuthorizer type
type ServiceAuthorizer struct {
	mock.Mock
}

type ServiceAuthorizer_Expecter struct {
	mock *mock.Mock
}

func (_m *ServiceAuthorizer) EXPECT() *ServiceAuthorizer_Expecter {
	return &ServiceAuthorizer_Expecter{mock: &_m.Mock}
}

// Authorize provides a mock function with given fields:
func (_m *ServiceAuthorizer) Authorize() (bank.Authorization, error) {
	ret := _m.Called()

	var r0 bank.Authorization
	if rf, ok := ret.Get(0).(func() bank.Authorization); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bank.Authorization)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceAuthorizer_Authorize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authorize'
type ServiceAuthorizer_Authorize_Call struct {
	*mock.Call
}

// Authorize is a helper method to define mock.On call
func (_e *ServiceAuthorizer_Expecter) Authorize() *ServiceAuthorizer_Authorize_Call {
	return &ServiceAuthorizer_Authorize_Call{Call: _e.mock.On("Authorize")}
}

func (_c *ServiceAuthorizer_Authorize_Call) Run(run func()) *ServiceAuthorizer_Authorize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ServiceAuthorizer_Authorize_Call) Return(_a0 bank.Authorization, _a1 error) *ServiceAuthorizer_Authorize_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewServiceAuthorizer interface {
	mock.TestingT
	Cleanup(func())
}

// NewServiceAuthorizer creates a new instance of ServiceAuthorizer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewServiceAuthorizer(t mockConstructorTestingTNewServiceAuthorizer) *ServiceAuthorizer {
	mock := &ServiceAuthorizer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
