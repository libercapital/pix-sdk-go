// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	charge "gitlab.com/bavatech/architecture/software/libs/go-modules/pix-sdk.git/services/charge"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateCharge provides a mock function with given fields: create
func (_m *Service) CreateCharge(create charge.CreateCharge) (*charge.Charge, error) {
	ret := _m.Called(create)

	var r0 *charge.Charge
	if rf, ok := ret.Get(0).(func(charge.CreateCharge) *charge.Charge); ok {
		r0 = rf(create)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*charge.Charge)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(charge.CreateCharge) error); ok {
		r1 = rf(create)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindCharge provides a mock function with given fields: txId, options
func (_m *Service) FindCharge(txId string, options ...*charge.FindChargeOption) (*charge.Charge, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, txId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *charge.Charge
	if rf, ok := ret.Get(0).(func(string, ...*charge.FindChargeOption) *charge.Charge); ok {
		r0 = rf(txId, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*charge.Charge)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...*charge.FindChargeOption) error); ok {
		r1 = rf(txId, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindCharges provides a mock function with given fields: charges
func (_m *Service) FindCharges(charges charge.ListCharges) (*charge.Charges, error) {
	ret := _m.Called(charges)

	var r0 *charge.Charges
	if rf, ok := ret.Get(0).(func(charge.ListCharges) *charge.Charges); ok {
		r0 = rf(charges)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*charge.Charges)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(charge.ListCharges) error); ok {
		r1 = rf(charges)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
