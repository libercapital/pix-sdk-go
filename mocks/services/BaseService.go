// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	http "net/http"

	common "gitlab.com/bavatech/architecture/software/libs/go-modules/pix-sdk/common"

	io "io"

	mock "github.com/stretchr/testify/mock"

	services "gitlab.com/bavatech/architecture/software/libs/go-modules/pix-sdk/services"
)

// BaseService is an autogenerated mock type for the BaseService type
type BaseService struct {
	mock.Mock
}

// CreateRequest provides a mock function with given fields: url, method, body
func (_m *BaseService) CreateRequest(url string, method string, body io.Reader) (*http.Request, error) {
	ret := _m.Called(url, method, body)

	var r0 *http.Request
	if rf, ok := ret.Get(0).(func(string, string, io.Reader) *http.Request); ok {
		r0 = rf(url, method, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Request)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, io.Reader) error); ok {
		r1 = rf(url, method, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Execute provides a mock function with given fields: r, options
func (_m *BaseService) Execute(r *http.Request, options ...common.RequestOption) (*http.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, r)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(*http.Request, ...common.RequestOption) *http.Response); ok {
		r0 = rf(r, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*http.Request, ...common.RequestOption) error); ok {
		r1 = rf(r, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetAuthorizer provides a mock function with given fields: authorizer
func (_m *BaseService) SetAuthorizer(authorizer services.ServiceAuthorizer) {
	_m.Called(authorizer)
}

type mockConstructorTestingTNewBaseService interface {
	mock.TestingT
	Cleanup(func())
}

// NewBaseService creates a new instance of BaseService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBaseService(t mockConstructorTestingTNewBaseService) *BaseService {
	mock := &BaseService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
