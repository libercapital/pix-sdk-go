// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	http "net/http"

	common "gitlab.com/bavatech/architecture/software/libs/go-modules/pix-sdk.git/common"

	io "io"

	mock "github.com/stretchr/testify/mock"

	services "gitlab.com/bavatech/architecture/software/libs/go-modules/pix-sdk.git/services"
)

// BaseService is an autogenerated mock type for the BaseService type
type BaseService struct {
	mock.Mock
}

type BaseService_Expecter struct {
	mock *mock.Mock
}

func (_m *BaseService) EXPECT() *BaseService_Expecter {
	return &BaseService_Expecter{mock: &_m.Mock}
}

// CreateRequest provides a mock function with given fields: url, method, body
func (_m *BaseService) CreateRequest(url string, method string, body io.Reader) (*http.Request, error) {
	ret := _m.Called(url, method, body)

	var r0 *http.Request
	if rf, ok := ret.Get(0).(func(string, string, io.Reader) *http.Request); ok {
		r0 = rf(url, method, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Request)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, io.Reader) error); ok {
		r1 = rf(url, method, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BaseService_CreateRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRequest'
type BaseService_CreateRequest_Call struct {
	*mock.Call
}

// CreateRequest is a helper method to define mock.On call
//  - url string
//  - method string
//  - body io.Reader
func (_e *BaseService_Expecter) CreateRequest(url interface{}, method interface{}, body interface{}) *BaseService_CreateRequest_Call {
	return &BaseService_CreateRequest_Call{Call: _e.mock.On("CreateRequest", url, method, body)}
}

func (_c *BaseService_CreateRequest_Call) Run(run func(url string, method string, body io.Reader)) *BaseService_CreateRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(io.Reader))
	})
	return _c
}

func (_c *BaseService_CreateRequest_Call) Return(_a0 *http.Request, _a1 error) *BaseService_CreateRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Execute provides a mock function with given fields: r, options
func (_m *BaseService) Execute(r *http.Request, options ...common.RequestOption) (*http.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, r)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(*http.Request, ...common.RequestOption) *http.Response); ok {
		r0 = rf(r, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*http.Request, ...common.RequestOption) error); ok {
		r1 = rf(r, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BaseService_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type BaseService_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//  - r *http.Request
//  - options ...common.RequestOption
func (_e *BaseService_Expecter) Execute(r interface{}, options ...interface{}) *BaseService_Execute_Call {
	return &BaseService_Execute_Call{Call: _e.mock.On("Execute",
		append([]interface{}{r}, options...)...)}
}

func (_c *BaseService_Execute_Call) Run(run func(r *http.Request, options ...common.RequestOption)) *BaseService_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]common.RequestOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(common.RequestOption)
			}
		}
		run(args[0].(*http.Request), variadicArgs...)
	})
	return _c
}

func (_c *BaseService_Execute_Call) Return(_a0 *http.Response, _a1 error) *BaseService_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// SetAuthorizer provides a mock function with given fields: authorizer
func (_m *BaseService) SetAuthorizer(authorizer services.ServiceAuthorizer) {
	_m.Called(authorizer)
}

// BaseService_SetAuthorizer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAuthorizer'
type BaseService_SetAuthorizer_Call struct {
	*mock.Call
}

// SetAuthorizer is a helper method to define mock.On call
//  - authorizer services.ServiceAuthorizer
func (_e *BaseService_Expecter) SetAuthorizer(authorizer interface{}) *BaseService_SetAuthorizer_Call {
	return &BaseService_SetAuthorizer_Call{Call: _e.mock.On("SetAuthorizer", authorizer)}
}

func (_c *BaseService_SetAuthorizer_Call) Run(run func(authorizer services.ServiceAuthorizer)) *BaseService_SetAuthorizer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(services.ServiceAuthorizer))
	})
	return _c
}

func (_c *BaseService_SetAuthorizer_Call) Return() *BaseService_SetAuthorizer_Call {
	_c.Call.Return()
	return _c
}

type mockConstructorTestingTNewBaseService interface {
	mock.TestingT
	Cleanup(func())
}

// NewBaseService creates a new instance of BaseService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBaseService(t mockConstructorTestingTNewBaseService) *BaseService {
	mock := &BaseService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
