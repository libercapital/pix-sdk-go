// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	pix "gitlab.com/bavatech/architecture/software/libs/go-modules/pix-sdk.git/services/pix"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// FindPix provides a mock function with given fields: e2eId
func (_m *Service) FindPix(e2eId string) (pix.Pix, error) {
	ret := _m.Called(e2eId)

	var r0 pix.Pix
	if rf, ok := ret.Get(0).(func(string) pix.Pix); ok {
		r0 = rf(e2eId)
	} else {
		r0 = ret.Get(0).(pix.Pix)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(e2eId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPix provides a mock function with given fields: listPix
func (_m *Service) ListPix(listPix pix.ListPix) (pix.ListPixResponse, error) {
	ret := _m.Called(listPix)

	var r0 pix.ListPixResponse
	if rf, ok := ret.Get(0).(func(pix.ListPix) pix.ListPixResponse); ok {
		r0 = rf(listPix)
	} else {
		r0 = ret.Get(0).(pix.ListPixResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(pix.ListPix) error); ok {
		r1 = rf(listPix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
